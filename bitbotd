#!/usr/bin/env python3

import sys
import bitbot.utils.consts

if sys.version_info < (3, 6):
    sys.stderr.write("BitBot requires python 3.6.0 or later\n")
    sys.exit(bitbot.utils.consts.Exit.WRONGVERSION)

import atexit, argparse, faulthandler, os, platform, time, typing
from bitbot import (
    Cache, Config, Control, Database, EventManager, Exports, IRCBot,
    LockFile, Logging, ModuleManager, Timers, utils,
)

faulthandler.enable()

directory = os.getcwd()
home = os.path.expanduser("~")
default_data = os.path.join(home, ".bitbot")

arg_parser = argparse.ArgumentParser(
    description="Python3 event-driven modular IRC bot")

arg_parser.add_argument("--version", "-v", action="store_true")

arg_parser.add_argument("--config", "-c", help="Location of config file",
    default=os.path.join(default_data, "bot.conf"))

arg_parser.add_argument("--data-dir", "-x",
    help="Location of data files (database, lock, socket)",
    default=default_data)

arg_parser.add_argument("--database", "-d",
    help="Location of the sqlite3 database file")

arg_parser.add_argument("--log-dir", "-l",
    help="Location of the log directory")

arg_parser.add_argument("--add-server", "-a",
    help="Add a new server", action="store_true")

arg_parser.add_argument("--verbose", "-V", action="store_true")
arg_parser.add_argument("--log-level", "-L")
arg_parser.add_argument("--no-logging", "-N", action="store_true")

arg_parser.add_argument("--external", "-e", help="External modules directory")

arg_parser.add_argument("--startup-disconnects", "-D",
    help="Tolerate failed connections on startup", action="store_true")

arg_parser.add_argument("--remove-server", "-R",
    help="Remove a server by it's alias")

args = arg_parser.parse_args()

if args.version:
    print("BitBot %s" % IRCBot.VERSION)
    sys.exit(0)

if not os.path.isdir(args.data_dir):
    os.mkdir(args.data_dir)

database_location = None
lock_location = None
sock_locaiton = None
log_directory = None
if not args.database == None:
    database_location = args.database
    lock_location = "%s.lock" % args.database
    sock_location = "%s.sock" % args.database
else:
    database_location = os.path.join(args.data_dir, "bot.db")
    lock_location = os.path.join(args.data_dir, "bot.lock")
    sock_location = os.path.join(args.data_dir, "bot.sock")

log_directory = args.log_dir or os.path.join(args.data_dir, "logs")
if not os.path.isdir(log_directory):
    os.mkdir(log_directory)

log_level = args.log_level
if not log_level:
    log_level = "debug" if args.verbose else "warn"

log = Logging.Log(not args.no_logging, log_level, log_directory)

log.info("Starting BitBot %s (Python v%s, db %s)",
    [IRCBot.VERSION, platform.python_version(), database_location])

lock_file = LockFile.LockFile(lock_location)
if not lock_file.available():
    log.critical("Database is locked. Is BitBot already running?")
    sys.exit(utils.consts.Exit.LOCKED)

atexit.register(lock_file.unlock)
lock_file.lock()

database = Database.Database(log, database_location)

if args.remove_server:
    alias = args.remove_server
    id = database.servers.by_alias(alias)
    if not id == None:
        database.servers.delete(typing.cast(int, id))
        print("Deleted server '%s'" % alias)
    else:
        sys.stderr.write("Unknown server '%s'\n" % alias)
    sys.exit(0)

def _add_server():
    details = utils.cli.add_server()

    database.servers.add(details.alias, details.hostname, details.port,
        details.password, details.tls, details.bindhost, details.nickname,
        details.username, details.realname)
if args.add_server:
    print("Adding a new server")
    _add_server()
    sys.exit(0)

cache = Cache.Cache()
config = Config.Config(args.config)
config.load()
events = EventManager.EventRoot(log).wrap()
exports = Exports.Exports()
timers = Timers.Timers(database, events, log)

core_modules = os.path.join(directory, "bitbot", "core_modules")
extra_modules = [os.path.join(directory, "modules")]
if args.external:
    extra_modules.append(os.path.abspath(args.external))
if "external-modules" in config:
    extra_modules.append(os.path.abspath(config["external-modules"]))

modules = ModuleManager.ModuleManager(events, exports, timers, config, log,
    core_modules, extra_modules)

bot = IRCBot.Bot(directory, args, cache, config, database, events,
    exports, log, modules, timers)
bot.add_poll_hook(cache)
bot.add_poll_hook(lock_file)
bot.add_poll_hook(timers)

control = Control.Control(bot, sock_location)
control.bind()
bot.add_poll_source(control)

server_configs = bot.database.servers.get_all()

if len(server_configs):
    bot.load_modules()

    servers = []
    for server_id, alias in server_configs:
        server = bot.add_server(server_id, connect=False)
        if not server == None and server.get_setting("connect", True):
            server.from_init = True
            servers.append(server)

    bot._events.on("boot.done").call()

    timers.setup(bot.find_settings(prefix="timer-"))

    for server in servers:
        if not bot.connect(server):
            log.error("Failed to connect to '%s'", [str(server)], exc_info=True)
            if not args.startup_disconnects:
                sys.exit(utils.consts.Exit.DISCONNECT)

    try:
        bot.run()
    except Exception as e:
        log.critical("Unhandled exception: %s", [str(e)], exc_info=True)
        sys.exit(utils.consts.Exit.FATAL)
else:
    try:
        if utils.cli.bool_input("no servers found, add one?"):
            _add_server()
    except KeyboardInterrupt:
        print()
        pass
